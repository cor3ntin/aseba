//https://google.github.io/flatbuffers/md__schemas.html

namespace mobsya.fb;


/// Basic Principle
/// Client and TDM excchange requests and response of different types
/// All tables are wrapped in a Message (see end of the file)
/// Most requests have a request_id will shall be a random integrer.
/// The reply to a given request will have the same request_id
/// Clients should not assume requests are treated in the order they are sent.



//Handshake messages
//The client needs to initiate the session by sending a ConnectionHandshake.
//If the client sends a message before a ConnectionHandshake, the server will
//drop the connection.
//The server reply with the same message
table ConnectionHandshake {
    //In the server -> client direction, protocolVersion designs the version of the
    //protocol both client and SERVER MUST use during the session
    //If the protocolVersion sent by the server is 0, then the client and the server
    //Do not share a compatible version, and the connection is dropped.
    //minProtocolVersion designs the minimal protocol of the protocol supported by the sender
    minProtocolVersion:uint = 1;
    protocolVersion:uint = 1;

    //Maximum size of a message
    //Each endpoint must advertise the maximum size of message they will accept.
    //If a message is received that exceed that size, the connection shall be dropped.
    maxMessageSize:uint = 102400;

    //A token represented as a byte sequence.
    //Tokens are notably used to identify local clients and to give special permissions to applications
    token:[ubyte];

    //In the server -> client direction, this is set to true if the client is on the same machine as the server
    localhostPeer:bool = false;
}

// The server sends ping at short intervals
// so that the client can monitor the connection's health
table Ping {}

//Stop the device manager
table DeviceManagerShutdownRequest {
    request_id:uint;
}

///A node id
table NodeId {
   id:[ubyte];
}

/// The Type of a node
/// A node can designate either a robot, a simulator, each with various capabilities.
enum NodeType : int {
  Thymio2 = 0,
  Thymio2Wireless  = 1,
  SimulatedThymio2 = 2,
  DummyNode        = 3,
  UnknownType      = 4
}

/// Capabilities of a node
/// What a client can do with a node may depends on permissions, firmware version, type of node/device, etc
enum NodeCapability : int {
  Rename  = 0x01,
  ForceResetAndStop = 0x02,
  FirwmareUpgrade   = 0x04,
}

/// The status of a node represents whether the node is connected and available.
enum NodeStatus : int {
  /// The status is unknown, this denotes a programmation error or a bug
  unknown   = 0,
  /// The node is just connected. However, sending code or requesting a VM desciption is unspecified in this state
  connected = 1,
  /// The node is available. It needs to be sent a LockNode message before any action that would mutate it state, such as sending code can take place
  available = 2,
  /// The node is busy - this will be sent to all clients, except the one who locked the node
  busy = 3,
  /// The node is ready - this will be sent the client that optained a lock on the node
  ready = 4,
  /// The node is disconnected. Any reference to it will be destroyed on the server side, and sending further messages to it will fail
  disconnected = 5,
}

// Represent various errors a request can fail with.
enum ErrorType : int {
  no_error = 0,
  /// Genric error
  unknown_error = 1,
  /// The node ddoes not exist or was disconnected
  unknown_node = 2,
  /// The node is busy (locked by another client)
  node_busy = 3,

  ///Unsuported variable type - For SetVariables and Events
  unsupported_variable_type = 4,

  // Pairing errors
  thymio2_pairing_write_dongle_failed = 5,
  thymio2_pairing_write_robot_failed = 6,
}


//see WatchNode
enum WatchableInfo : int {
    StopMonitoring = 0,
    //Monitor for variables changes
    Variables = 0x01,
    Events    = 0x02,
    VMExecutionState = 0x04,
    SharedEventsDescription = 0x08,
    SharedVariables = 0x10,
    Scratchpads     = 0x20
}

enum ProgrammingLanguage : int {
    Aseba = 1,
    Aesl  = 2,
}

/// Represent a node
table Node {
  node_id:NodeId;
  group_id:NodeId;
  status:NodeStatus;
  type:NodeType;
  name:string;
  capabilities:ulong  = 0;   // bitflags of NodeCapability
  fw_version:string;         // current firmware version
  latest_fw_version:string;  // if non empty, an update is available
}

table NamedValue {
    name: string (key);
    value: [ubyte] (flexbuffer);
}

// Variables are represented as a flexbuffer,
// which serializes a property (see propertiy.h)
table NodeVariable {
    name: string (key);
    value: [ubyte] (flexbuffer);
}

// When variables are monitored (see WatchNode), variables modified will be sent
// Upon starting to watch variables, a VariablesChanged message is emmitted containing all variables.
// After that non-modified variables are not sent again.
table VariablesChanged {
   node_id:NodeId;
   vars:[NodeVariable];
   /// unix timestamp ( miliseconds) of when the variables were modified - or 0 if unspecified
   timestamp: ulong = 0;
}

// Send events to a specific aseba node.
// There can be several events sent at the same time
table SendEvents {
   request_id:uint;
   node_id:NodeId;
   events:[NamedValue];
}

// An aseba node as emitted aone or more events
table EventsEmitted {
   node_id:NodeId;
   events:[NamedValue];
   /// unix timestamp ( miliseconds) of when the events were emitted - or 0 if unspecified
   timestamp: ulong = 0;
}

/// Message sent by the server when a node changes status.
/// This messages is automatically sent when the application first connects and each time one or more node change status
table NodesChanged {
  /// Nodes whose status changed. it's up to the client to maintain a list of all nodes.
  nodes:[Node];
}

/// Ask the server to send a list of all nodes
/// The server will send back a NodesChanged message containing infos on all nodes
table RequestListOfNodes {}

/// Request the server to send a NodeAsebaVMDescription for the node corresponding to node_id
table RequestNodeAsebaVMDescription {
  request_id:uint;
  node_id:NodeId;
}

///--------- ASEBA VM DESCRIPTION ----------------------------------------------------

/// The description of an Aseba VM, sent in response to a RequestNodeAsebaVMDescription
table NodeAsebaVMDescription {
  request_id:uint;
  node_id:NodeId;
  bytecode_size:uint;
  data_size:uint;
  stack_size:uint;
  variables:[AsebaNamedVariable];
  events:[AsebaEvent];
  functions:[AsebaNativeFunction];
}

table AsebaNamedVariable {
  index: ushort;
  name:string;
  size:uint;
}

table AsebaEvent {
  index: ushort;
  name:string;
  description:string;
}

table AsebaNativeFunction {
  index: ushort;
  name:string;
  description:string;
  parameters:[AsebaNativeFunctionParameter];
}

table AsebaNativeFunctionParameter {
  name:string;
  size:uint;
}

//------------------------------------------------------------------------------------------

/// Modify the value of specified sharedvariables
table SetVariables {
   request_id:uint;
   node_or_group_id:NodeId;
   vars:[NodeVariable];
}

/// Set a new name for this node
table RenameNode {
   request_id:uint;
   node_id:NodeId;
   new_name:string;
}

/// Ask the server to give this client sole ownership of the node.
/// This needs to be done once before sending mutating instructions to the node
/// The lock remain until the client disconnect, the device disconnect or a UnlockNode message is sent
/// Once locked, the node appears busy to all clients.
table LockNode {
  request_id:uint;
  node_id:NodeId;
}

/// Unlock a device so that other client can use it.
/// Once unlocked, the node appears ready to all clients.
table UnlockNode {
  request_id:uint;
  node_id:NodeId;
}


//see WatchNode
enum CompilationOptions : uint (bit_flags) {
    NoOption,
    LoadOnTarget,
    FetchBytecode,
}


table CompileAndLoadCodeOnVM {
    request_id:uint;
    node_id:NodeId;
    language:ProgrammingLanguage = Aseba;
    program:string (required);
    options:CompilationOptions = 0;
}

table CompileAndSave{
    request_id:uint;
    node_id:NodeId;
    language:ProgrammingLanguage = Aseba;
    program:string (required);
    options:CompilationOptions = 0;
}


// Compilation failure, after a scratchpad update, CompileAndSave, or CompileAndLoadCodeOnVM
table CompilationResultFailure {
    request_id:uint;
    message:string (required);
    character:uint;
    line:uint;
    column:uint;
}

table SaveBytecode{
    request_id:uint;
    node_id:NodeId;
    program:string;
}


// Statistics about a succesful compilation
table CompilationResultSuccess {
    request_id:uint;
    bytecode_size:uint;
    total_bytecode_size:uint;
    variables_size:uint;
    total_variables_size:uint;
}

// Control the VM
enum VMExecutionStateCommand : short {
    Stop,
    Run,
    Step,
    StepToNextLine,
    Pause,
    Reset,
    Reboot,
    Suspend,
    WriteProgramToDeviceMemory,
}

// Current VM state - see WatchNode
enum VMExecutionState : short {
    Stopped,
    Running,
    Paused,
}

// Runtime VM errors
enum VMExecutionError : short {
    NoError,
    Killed,
    OutOfBoundAccess,
    DivisionByZero,
    GenericError,
}

// Control the VM
table SetVMExecutionState {
    request_id:uint;
    node_id:NodeId;
    command:VMExecutionStateCommand;
}


// VMExecutionStateChanged are sent when starting, stopping, or stapping through the vm
table VMExecutionStateChanged {
    node_id:NodeId;
    state:VMExecutionState;
    // Current line when stepping through
    line:uint;
    // Runtime errors, if any
    error:VMExecutionError = NoError;
    errorMsg:string;
}

table Breakpoint {
    line:uint;
}

// Attemps to set breakpoints - the reply will send a list of actually set breakpoints
table SetBreakpoints {
    request_id:uint;
    node_id:NodeId;
    breakpoints:[Breakpoint];
}

table SetBreakpointsResponse {
    request_id:uint;
    error:ErrorType;
    breakpoints:[Breakpoint];
}

// Ask the server to receive events pertaining to a node
table WatchNode {
    request_id:uint;
    node_or_group_id:NodeId;
    //bitflag of WatchableInfo
    info_type:uint;
}

// Sent when a request fails
table Error {
  request_id:uint;
  error:ErrorType;
}

// Acknowledge a request has been handled when the request has
// Specific response table
table RequestCompleted {
    request_id:uint;
}

// An aseba event - each event's value is an integer array of fixed sized
table EventDescription {
    name:string;
    fixed_sized:uint;
    index:uint = 0;
}

// Set all events for a group
table RegisterEvents {
    request_id:uint;
    node_or_group_id:NodeId; // if the uuid is that of a node, events will be set on the group it belongs to.
    events:[EventDescription];
}

// The table of events changed
table EventsDescriptionsChanged {
    node_or_group_id:NodeId;
    events:[EventDescription];
}

// Update a scratchpad.
// This message can go in either direction
// Either from the client when the text editort changes for example,
// Or from the TDM to clients when an ESL file is loaded, or when another endpoint update it
table ScratchpadUpdate {
    request_id:uint = 0;
    scratchpad_id:NodeId (required);   // A scratchpad as an id which might be different from the node id
    group_id:NodeId; // It can be affected to a node
    node_id:NodeId;  // And a group
    language:ProgrammingLanguage = Aseba;
    text:string (required); // Code
    name:string;   // A name can be set in AESL files
    deleted:bool = false; // IF this flag is thet the scatchpad no longer exist in the TDM
}

// Request a firmware update
// Require that the node is not locked.
// The node will be unavailable until the emd of the update.
// And will reboot.
table FirmwareUpgradeRequest {
    request_id:uint;
    node_id:NodeId;
}

// Events sent periodically
// During a firmare update so
// That the the client that initiated the upgrade can monitor the progress
table FirmwareUpgradeStatus {
    request_id : uint;
    node_id    : NodeId;
    progress   : double; // between 0..1
}

// Represent a dongle
table Thymio2WirelessDongle {
    dongle_id   : NodeId;
    dongle_node : uint16;
    network_id: uint16;
    channel_id: uint8;
}

table EnableThymio2PairingMode {
    enable: bool = true;
}

// Lisof dongles
// Message sent when a dongle is connected or disconnected
table Thymio2WirelessDonglesChanged {
    dongles: [Thymio2WirelessDongle];
}

// Pair a Thymio 2 to a dongle
table Thymio2WirelessDonglePairingRequest {
    request_id:uint;
    dongle_id:NodeId;
    node_id:NodeId;
    network_id: uint16;
    channel_id: uint8;
}

// Thymio2WirelessDonglePairingRequest was succesful
table Thymio2WirelessDonglePairingResponse{
    request_id:uint;
    // The new network id
    network_id: uint16;
    // The new channel id
    channel_id: uint8;
}


// Each message is wrapped in a single message object
// That represents an union of all possible message
// The TDM sends and expect only Message, prefixed by a size (uin32_t)

// +----------------------------------------------------------+
// | Packet                                                   |
// ++---------++--------------------------------------------+ |
// ||         ||        Message                             | |
// ||         ||   +--------------------------------------+ | |
// ||         ||   |                                      | | |
// ||UINT_32  ||   |      One of AnyMessage               | | |
// ||         ||   +--------------------------------------+ | |
// ||         ||                                            | |
// ++---------++--------------------------------------------+ |
// |                                                          |
// +----------------------------------------------------------+

union AnyMessage {
    ConnectionHandshake,
    DeviceManagerShutdownRequest,
    RequestListOfNodes,
    RequestNodeAsebaVMDescription,
    LockNode,
    UnlockNode,
    RenameNode,
    CompileAndLoadCodeOnVM,
    NodesChanged,
    NodeAsebaVMDescription,
    RequestCompleted,
    Error,
    CompilationResultFailure,
    CompilationResultSuccess,
    WatchNode,
    VariablesChanged,
    SetVariables,
    EventsDescriptionsChanged,
    RegisterEvents,
    SendEvents,
    EventsEmitted,
    SetBreakpoints,
    SetBreakpointsResponse,
    SetVMExecutionState,
    VMExecutionStateChanged,
    ScratchpadUpdate,
    FirmwareUpgradeRequest,
    FirmwareUpgradeStatus,
    Ping,
    EnableThymio2PairingMode,
    Thymio2WirelessDonglesChanged,
    Thymio2WirelessDonglePairingRequest,
    Thymio2WirelessDonglePairingResponse,
    CompileAndSave,
    SaveBytecode
}

table Message {
  message:AnyMessage;
}


root_type Message;
